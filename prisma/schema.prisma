// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Animal {
  id          String      @id @default(uuid())
  name        String
  animal_categories    AnimalCategory[]  @relation("AnimalCategoryToAnimal")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

model AnimalCategory {
  id          String      @id @default(uuid())
  name        String
  animalId    String
  animal      Animal      @relation("AnimalCategoryToAnimal", fields: [animalId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([animalId])
}

model Store {
  id          String        @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  products    Product[]     @relation("StoreToProduct")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Billboard {
  id          String        @id @default(uuid())
  storeId     String
  store       Store         @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt

  @@index([storeId])
}

model Category {
  id          String        @id @default(uuid())
  storeId     String
  store       Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard     @relation(fields: [billboardId], references: [id])
  products    Product[]     @relation("CategoryToProduct")
  name        String
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @default(now())

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[]

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([productId])
}